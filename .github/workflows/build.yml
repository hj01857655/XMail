name: 'Build and Release'

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: '--bundles msi'
            target: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
          shared-key: ${{ matrix.platform }}

      # Cache WiX tools to avoid repeated downloads on Windows
      - name: Cache WiX tools (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\\Users\\runneradmin\\AppData\\Local\\tauri\\WixTools314
          key: wix314-windows-cache

      # Install and enable sccache on Windows to speed up Rust compilation
      - name: Install sccache (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          choco install -y sccache
          echo "RUSTC_WRAPPER=sccache" >> $Env:GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=1G" >> $Env:GITHUB_ENV
          echo "SCCACHE_DIR=$Env:LOCALAPPDATA\\Mozilla\\sccache" >> $Env:GITHUB_ENV

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Set Rust build optimization
        run: |
          echo "CARGO_INCREMENTAL=1" >> $GITHUB_ENV
          echo "CARGO_NET_RETRY=10" >> $GITHUB_ENV
          echo "RUST_BACKTRACE=1" >> $GITHUB_ENV

      - name: Compute tag and release names
        id: names
        shell: bash
        run: |
          # If this is a tag push (refs/tags/*), use that tag. Else generate nightly tag
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"
            echo "is_tag_push=true" >> "$GITHUB_OUTPUT"
          else
            ts=$(date -u +"%Y%m%d-%H%M%S")
            echo "tag=nightly-${ts}-${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"
            echo "is_tag_push=false" >> "$GITHUB_OUTPUT"
          fi
          echo "ref_name=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Create and push tag (for non-tag pushes)
        if: steps.names.outputs.is_tag_push != 'true'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          # Avoid re-creating if exists
          if git rev-parse -q --verify "refs/tags/${{ steps.names.outputs.tag }}" >/dev/null; then
            echo "Tag already exists: ${{ steps.names.outputs.tag }}"
          else
            git tag -a "${{ steps.names.outputs.tag }}" -m "Auto tag from CI"
            git push origin "${{ steps.names.outputs.tag }}"
          fi

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_INCREMENTAL: 1
          RUST_BACKTRACE: 1
        with:
          tagName: ${{ steps.names.outputs.tag }}
          releaseName: 'XMail ${{ steps.names.outputs.tag }}'
          releaseBody: |
            ## XMail
            
            ### 
            
            **:**
            - Windows: `.msi` `.exe` 
            - macOS: `.dmg` 
            
            ### 
            - (, , , )
            - 
            - 
            - 
            - 
            
            ### 
            - : Vue.js 3 + Vite
            - : Rust + Tauri
            - : SQLite
            
            [Issues](https://github.com/hj01857655/XMail/issues) .
          releaseDraft: false
          prerelease: ${{ steps.names.outputs.is_tag_push != 'true' }}
          args: ${{ matrix.args }}

      - name: sccache stats (Windows)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          sccache --show-stats || echo "sccache not available"