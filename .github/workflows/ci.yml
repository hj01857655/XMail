name: 'CI and Auto Release'

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# 全局环境变量
env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  CARGO_NET_RETRY: 10

# 全局权限设置
permissions:
  contents: read

jobs:
  check-release:
    name: 'Check Release Requirements'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for auto-release tag
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -q "\[auto-release:v[0-9]\+\.[0-9]\+\.[0-9]\+\]"; then
            VERSION=$(echo "$COMMIT_MSG" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "🚀 检测到自动发布标记: $VERSION"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "✅ 普通提交，只进行测试构建"
          fi
    
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}

  build:
    name: 'Build (${{ matrix.platform }})'
    needs: check-release
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            os-name: 'macOS'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            os-name: 'macOS'
          - platform: 'windows-latest'
            args: '--bundles msi,nsis'
            target: ''
            os-name: 'Windows'

    runs-on: ${{ matrix.platform }}
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
          shared-key: ${{ matrix.platform }}

      # Cache WiX tools to avoid repeated downloads on Windows
      - name: Cache WiX tools (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: C:\\Users\\runneradmin\\AppData\\Local\\tauri\\WixTools314
          key: wix314-windows-cache

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Update version for release
        if: needs.check-release.outputs.should_release == 'true'
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"  # 移除 v 前缀
          
          echo "更新版本号到: $VERSION_NUMBER"
          
          # 跨平台兼容的 sed 命令
          if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS (BSD sed)
            sed -i '' "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" package.json
            sed -i '' "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" src-tauri/tauri.conf.json
            sed -i '' "s/^version = \".*\"/version = \"$VERSION_NUMBER\"/" src-tauri/Cargo.toml
          else
            # Linux (GNU sed)
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" package.json
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" src-tauri/tauri.conf.json
            sed -i "s/^version = \".*\"/version = \"$VERSION_NUMBER\"/" src-tauri/Cargo.toml
          fi
          
          echo "版本号更新完成"

      - name: Build for testing (no release)
        if: needs.check-release.outputs.should_release != 'true'
        uses: tauri-apps/tauri-action@v0
        with:
          args: ${{ matrix.args }}

      - name: Build and release
        if: needs.check-release.outputs.should_release == 'true'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.check-release.outputs.version }}
          releaseName: 'XMail ${{ needs.check-release.outputs.version }}'
          releaseBody: |
            ## 自动发布 ${{ needs.check-release.outputs.version }}
            
            🤖 此版本由 CI 成功后自动发布
            
            ### 📦 安装包下载
            - Windows: .msi 和 .exe 安装包
            - macOS: .dmg 安装包 (支持 Intel 和 Apple Silicon)
            
            ### 🔗 相关信息
            - 基于提交: ${{ github.sha }}
            - 构建时间: ${{ github.run_started_at }}
            
            如有问题请访问 [Issues](https://github.com/hj01857655/XMail/issues) 页面反馈。
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  sync-version:
    name: 'Sync Version to Repository'
    needs: [check-release, build]
    runs-on: ubuntu-latest
    if: needs.check-release.outputs.should_release == 'true'
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update project files with new version
        run: |
          VERSION="${{ needs.check-release.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"  # 移除 v 前缀
          
          echo "同步版本号到项目文件: $VERSION_NUMBER"
          
          # 跨平台兼容的版本更新 (这里运行在 ubuntu，使用 GNU sed)
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NUMBER\"/" src-tauri/tauri.conf.json
          sed -i "s/^version = \".*\"/version = \"$VERSION_NUMBER\"/" src-tauri/Cargo.toml
          
          # 检查是否有变化
          if git diff --quiet; then
            echo "版本号已经是最新的，无需更新"
          else
            echo "发现版本号变化，提交更新"
            
            # 配置 git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # 提交变化
            git add package.json src-tauri/tauri.conf.json src-tauri/Cargo.toml
            git commit -m "chore: sync version to $VERSION [skip ci]"
            
            # 推送到远程
            git push origin master
            
            echo "✅ 版本号已同步到项目文件"
          fi

      - name: Summary
        if: always()
        run: |
          if [ "${{ needs.check-release.outputs.should_release }}" == "true" ]; then
            echo "## 🚀 发布完成" >> $GITHUB_STEP_SUMMARY
            echo "版本: ${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "发布地址: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          fi