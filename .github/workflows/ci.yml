name: 'CI and Auto Release'

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'windows-latest'
            args: '--bundles msi'
            target: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true
          shared-key: ${{ matrix.platform }}

      - name: Install frontend dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build app (test only)
        uses: tauri-apps/tauri-action@v0
        env:
          CARGO_INCREMENTAL: 0
          RUST_BACKTRACE: 1
        with:
          args: ${{ matrix.args }}

  auto-release:
    needs: test-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'master')
    permissions:
      contents: write
      pull-requests: write
      actions: write
      metadata: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check for auto-release tag
        id: check
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          if echo "$COMMIT_MSG" | grep -q "\[auto-release:v[0-9]\+\.[0-9]\+\.[0-9]\+\]"; then
            VERSION=$(echo "$COMMIT_MSG" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "🚀 检测到自动发布标记: $VERSION"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "✅ 构建测试成功！如需自动发布，请在提交消息中添加 [auto-release:v1.0.1] 标记"
          fi

      - name: Create release
        if: steps.check.outputs.should_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.check.outputs.version }}"
          COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          echo "🚀 创建 GitHub Release: $VERSION"
          
          # 创建发布说明
          cat > release_notes.md << EOF
          ## 自动发布 $VERSION
          
          🤖 此版本由 CI 成功后自动发布
          
          ### 📦 安装包下载
          - Windows: \`.msi\` 安装包  
          - macOS: \`.dmg\` 安装包 (支持 Intel 和 Apple Silicon)
          
          ### 🔗 相关信息
          - 基于提交: $COMMIT_SHA
          - 构建时间: $BUILD_TIME
          
          如有问题请访问 [Issues](https://github.com/hj01857655/XMail/issues) 页面反馈。
          EOF
          
          # 删除已存在的 Release 和标签
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "删除已存在的 Release: $VERSION"
            gh release delete "$VERSION" --yes || true
          fi
          
          if git rev-parse -q --verify "refs/tags/$VERSION" >/dev/null; then
            echo "删除已存在的标签: $VERSION"
            git push --delete origin "$VERSION" || true
          fi
          
          # 创建新的 Release（会自动创建标签）
          gh release create "$VERSION" \
            --title "XMail $VERSION" \
            --notes-file release_notes.md \
            --target "${{ github.sha }}"