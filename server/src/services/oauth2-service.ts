/**\n * OAuth2 认证服务\n * 支持Gmail和Outlook的OAuth2认证\n */\n\nimport { EmailProviderConfig } from '../config/email-providers'\n\nexport interface OAuth2Config {\n  clientId: string\n  clientSecret: string\n  redirectUri: string\n  scopes: string[]\n}\n\nexport interface OAuth2Token {\n  accessToken: string\n  refreshToken: string\n  expiresAt: Date\n  tokenType: string\n}\n\nexport class OAuth2Service {\n  /**\n   * 生成OAuth2授权URL\n   */\n  static generateAuthUrl(\n    provider: EmailProviderConfig,\n    config: OAuth2Config,\n    state?: string\n  ): string {\n    if (!provider.oauth) {\n      throw new Error(`Provider ${provider.name} does not support OAuth2`)\n    }\n\n    const params = new URLSearchParams({\n      client_id: config.clientId,\n      redirect_uri: config.redirectUri,\n      scope: config.scopes.join(' '),\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent',\n      ...(state && { state })\n    })\n\n    return `${provider.oauth.authUrl}?${params.toString()}`\n  }\n\n  /**\n   * 交换授权码获取访问令牌\n   */\n  static async exchangeCodeForToken(\n    provider: EmailProviderConfig,\n    config: OAuth2Config,\n    authCode: string\n  ): Promise<OAuth2Token> {\n    if (!provider.oauth) {\n      throw new Error(`Provider ${provider.name} does not support OAuth2`)\n    }\n\n    const response = await fetch(provider.oauth.tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n      },\n      body: new URLSearchParams({\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        code: authCode,\n        grant_type: 'authorization_code',\n        redirect_uri: config.redirectUri\n      })\n    })\n\n    if (!response.ok) {\n      const error = await response.text()\n      throw new Error(`OAuth2 token exchange failed: ${error}`)\n    }\n\n    const data = await response.json()\n    \n    return {\n      accessToken: data.access_token,\n      refreshToken: data.refresh_token,\n      expiresAt: new Date(Date.now() + (data.expires_in * 1000)),\n      tokenType: data.token_type || 'Bearer'\n    }\n  }\n\n  /**\n   * 刷新访问令牌\n   */\n  static async refreshToken(\n    provider: EmailProviderConfig,\n    config: OAuth2Config,\n    refreshToken: string\n  ): Promise<OAuth2Token> {\n    if (!provider.oauth) {\n      throw new Error(`Provider ${provider.name} does not support OAuth2`)\n    }\n\n    const response = await fetch(provider.oauth.tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n      },\n      body: new URLSearchParams({\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token'\n      })\n    })\n\n    if (!response.ok) {\n      const error = await response.text()\n      throw new Error(`Token refresh failed: ${error}`)\n    }\n\n    const data = await response.json()\n    \n    return {\n      accessToken: data.access_token,\n      refreshToken: data.refresh_token || refreshToken, // 某些提供商不返回新的refresh_token\n      expiresAt: new Date(Date.now() + (data.expires_in * 1000)),\n      tokenType: data.token_type || 'Bearer'\n    }\n  }\n\n  /**\n   * 验证访问令牌是否有效\n   */\n  static async validateToken(\n    provider: EmailProviderConfig,\n    token: OAuth2Token\n  ): Promise<boolean> {\n    // 检查令牌是否过期\n    if (new Date() >= token.expiresAt) {\n      return false\n    }\n\n    // 根据提供商验证令牌\n    try {\n      if (provider.name === 'gmail') {\n        const response = await fetch('https://www.googleapis.com/oauth2/v1/tokeninfo', {\n          method: 'GET',\n          headers: {\n            'Authorization': `${token.tokenType} ${token.accessToken}`\n          }\n        })\n        return response.ok\n      } else if (provider.name === 'outlook') {\n        const response = await fetch('https://graph.microsoft.com/v1.0/me', {\n          method: 'GET',\n          headers: {\n            'Authorization': `${token.tokenType} ${token.accessToken}`\n          }\n        })\n        return response.ok\n      }\n    } catch (error) {\n      console.error('Token validation failed:', error)\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * 撤销访问令牌\n   */\n  static async revokeToken(\n    provider: EmailProviderConfig,\n    token: OAuth2Token\n  ): Promise<boolean> {\n    try {\n      if (provider.name === 'gmail') {\n        const response = await fetch(`https://oauth2.googleapis.com/revoke?token=${token.accessToken}`, {\n          method: 'POST'\n        })\n        return response.ok\n      } else if (provider.name === 'outlook') {\n        // Microsoft Graph不支持简单的令牌撤销，需要通过应用注册管理\n        console.warn('Outlook token revocation requires app registration management')\n        return true\n      }\n    } catch (error) {\n      console.error('Token revocation failed:', error)\n      return false\n    }\n\n    return false\n  }\n}\n\n/**\n * OAuth2配置管理\n */\nexport class OAuth2ConfigManager {\n  private static configs: Map<string, OAuth2Config> = new Map()\n\n  /**\n   * 设置提供商的OAuth2配置\n   */\n  static setConfig(providerName: string, config: OAuth2Config): void {\n    this.configs.set(providerName, config)\n  }\n\n  /**\n   * 获取提供商的OAuth2配置\n   */\n  static getConfig(providerName: string): OAuth2Config | null {\n    return this.configs.get(providerName) || null\n  }\n\n  /**\n   * 从环境变量加载配置\n   */\n  static loadFromEnv(): void {\n    // Gmail配置\n    const gmailClientId = process.env.GMAIL_CLIENT_ID\n    const gmailClientSecret = process.env.GMAIL_CLIENT_SECRET\n    const gmailRedirectUri = process.env.GMAIL_REDIRECT_URI || 'http://localhost:3000/auth/gmail/callback'\n    \n    if (gmailClientId && gmailClientSecret) {\n      this.setConfig('gmail', {\n        clientId: gmailClientId,\n        clientSecret: gmailClientSecret,\n        redirectUri: gmailRedirectUri,\n        scopes: [\n          'https://www.googleapis.com/auth/gmail.readonly',\n          'https://www.googleapis.com/auth/gmail.send'\n        ]\n      })\n    }\n\n    // Outlook配置\n    const outlookClientId = process.env.OUTLOOK_CLIENT_ID\n    const outlookClientSecret = process.env.OUTLOOK_CLIENT_SECRET\n    const outlookRedirectUri = process.env.OUTLOOK_REDIRECT_URI || 'http://localhost:3000/auth/outlook/callback'\n    \n    if (outlookClientId && outlookClientSecret) {\n      this.setConfig('outlook', {\n        clientId: outlookClientId,\n        clientSecret: outlookClientSecret,\n        redirectUri: outlookRedirectUri,\n        scopes: [\n          'https://graph.microsoft.com/Mail.Read',\n          'https://graph.microsoft.com/Mail.Send',\n          'offline_access'\n        ]\n      })\n    }\n  }\n\n  /**\n   * 检查提供商是否已配置OAuth2\n   */\n  static isConfigured(providerName: string): boolean {\n    return this.configs.has(providerName)\n  }\n\n  /**\n   * 获取所有已配置的提供商\n   */\n  static getConfiguredProviders(): string[] {\n    return Array.from(this.configs.keys())\n  }\n}