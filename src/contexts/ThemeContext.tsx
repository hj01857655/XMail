import { createContext, useContext, useState, useEffect, ReactNode } from 'react'\nimport { ConfigProvider, theme } from 'antd'\nimport zhCN from 'antd/locale/zh_CN'\n\ninterface ThemeContextType {\n  isDarkMode: boolean\n  toggleTheme: () => void\n  setTheme: (dark: boolean) => void\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext)\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider')\n  }\n  return context\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode\n}\n\nexport const ThemeProvider = ({ children }: ThemeProviderProps) => {\n  const [isDarkMode, setIsDarkMode] = useState(() => {\n    // 从 localStorage 获取保存的主题设置\n    const saved = localStorage.getItem('xmail-theme')\n    if (saved) {\n      return JSON.parse(saved)\n    }\n    // 检查系统主题偏好\n    return window.matchMedia('(prefers-color-scheme: dark)').matches\n  })\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode)\n  }\n\n  const setTheme = (dark: boolean) => {\n    setIsDarkMode(dark)\n  }\n\n  // 保存主题设置到 localStorage\n  useEffect(() => {\n    localStorage.setItem('xmail-theme', JSON.stringify(isDarkMode))\n    \n    // 更新 body 类名用于自定义样式\n    if (isDarkMode) {\n      document.body.classList.add('dark-theme')\n      document.body.classList.remove('light-theme')\n    } else {\n      document.body.classList.add('light-theme')\n      document.body.classList.remove('dark-theme')\n    }\n  }, [isDarkMode])\n\n  // 监听系统主题变化\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n    const handleChange = (e: MediaQueryListEvent) => {\n      // 只有在用户没有手动设置主题时才跟随系统\n      const savedTheme = localStorage.getItem('xmail-theme')\n      if (!savedTheme) {\n        setIsDarkMode(e.matches)\n      }\n    }\n\n    mediaQuery.addEventListener('change', handleChange)\n    return () => mediaQuery.removeEventListener('change', handleChange)\n  }, [])\n\n  const antdTheme = {\n    algorithm: isDarkMode ? theme.darkAlgorithm : theme.defaultAlgorithm,\n    token: {\n      colorPrimary: '#1890ff',\n      borderRadius: 6,\n      ...(isDarkMode ? {\n        colorBgContainer: '#1f1f1f',\n        colorBgElevated: '#262626',\n        colorBgLayout: '#141414',\n        colorText: 'rgba(255, 255, 255, 0.85)',\n        colorTextSecondary: 'rgba(255, 255, 255, 0.65)',\n        colorBorder: '#434343',\n        colorBorderSecondary: '#303030',\n      } : {\n        colorBgContainer: '#ffffff',\n        colorBgElevated: '#ffffff',\n        colorBgLayout: '#f5f5f5',\n        colorText: 'rgba(0, 0, 0, 0.88)',\n        colorTextSecondary: 'rgba(0, 0, 0, 0.65)',\n        colorBorder: '#d9d9d9',\n        colorBorderSecondary: '#f0f0f0',\n      })\n    },\n    components: {\n      Layout: {\n        bodyBg: isDarkMode ? '#141414' : '#f5f5f5',\n        headerBg: isDarkMode ? '#1f1f1f' : '#ffffff',\n        siderBg: isDarkMode ? '#1f1f1f' : '#ffffff',\n      },\n      Menu: {\n        itemBg: 'transparent',\n        subMenuItemBg: 'transparent',\n        itemSelectedBg: isDarkMode ? '#1890ff1a' : '#e6f7ff',\n        itemHoverBg: isDarkMode ? '#ffffff0d' : '#f5f5f5',\n      },\n      Card: {\n        colorBgContainer: isDarkMode ? '#1f1f1f' : '#ffffff',\n      },\n      Input: {\n        colorBgContainer: isDarkMode ? '#262626' : '#ffffff',\n      },\n      Select: {\n        colorBgContainer: isDarkMode ? '#262626' : '#ffffff',\n      },\n      Modal: {\n        contentBg: isDarkMode ? '#1f1f1f' : '#ffffff',\n        headerBg: isDarkMode ? '#1f1f1f' : '#ffffff',\n      },\n      Dropdown: {\n        colorBgElevated: isDarkMode ? '#262626' : '#ffffff',\n      },\n      Tooltip: {\n        colorBgSpotlight: isDarkMode ? '#434343' : '#ffffff',\n      }\n    }\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme, setTheme }}>\n      <ConfigProvider\n        theme={antdTheme}\n        locale={zhCN}\n      >\n        {children}\n      </ConfigProvider>\n    </ThemeContext.Provider>\n  )\n}